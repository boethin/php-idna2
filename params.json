{"name":"php-idna2","tagline":"A PHP extension providing IDNA 2008 processing functions based on the idnkit-2 library from JPRS","body":"# php-idna2\r\nPHP IDNA extension\r\n\r\nPHP extension for dealing with internationalized domain names, providing both IDNA 2003 and IDNA 2008 processing functions.\r\n\r\n## Description\r\n\r\nDealing with Internationalized Domain Names (IDN) basically means to encode Non-ASCII domain labels into ASCII-compatible encoding (prefixed with \"xn--\") and vice versa. For example, the domain name name *www.böthin.de* is encoded to *www.xn--bthin-jua.de* by way of the well known Punycode algorithm. However, the question of how to consider arbitrary Unicode strings as domain labels in general is more complex and has to do with normalization processes and Unicode character classifications.\r\n\r\nThis extension makes the functionallity of two C-librarys available: \r\n- GNU Libidn (IDNA 2003) and \r\n- Idnkit-2 from the JPRS registry (IDNA 2008).\r\n\r\nThere is an online [IDN tool](http://xn--domain.net) based on this extension.\r\n\r\nNote:\r\n\r\nThis is an experimantal tool suitable for dealing with advanced IDNA tasks. For more simple tasks, there are other solutions for handling IDN in PHP, for example [PHP's intl framework](http://php.net/manual/en/ref.intl.idn.php).\r\n\r\n## Sample usage\r\n\r\n```php\r\n    // 㯙㯜㯙㯟 is the Punycode decoded string of \"domain\"\r\n    $utf8 = idna2_to_utf8(array(0x3BD9,0x3BDC,0x3BD9,0x3BDF));\r\n    assert($utf8 === \"\\xe3\\xaf\\x99\\xe3\\xaf\\x9c\\xe3\\xaf\\x99\\xe3\\xaf\\x9f\");\r\n    $codepoints = idna2_from_utf8($utf8); // array(0x3BD9,0x3BDC,0x3BD9,0x3BDF)\r\n    \r\n    $punycode = idna2_punycode_encode($utf8);\r\n    assert($punycode === \"domain\"); \r\n    assert($utf8 === idna2_punycode_decode($punycode));\r\n    \r\n    $encoded = idna2_encode(\"㯙㯜㯙㯟.net\");\r\n    assert(\"xn--domain.net\" === $encoded);\r\n\r\n```\r\n    \r\n\r\nSee the [API documentation](http://boethin.github.io/php-idna2/phpdoc/packages/Default.html) for an overview.\r\n\r\n## Prerequisites\r\n\r\n- Install the [GNU Libidn library](http://www.gnu.org/software/libidn/)\r\n- Install the [idnkit-2.3 library](http://jprs.co.jp/idn/index-e.html)\r\n- You need the PHP5 developer tools (phpize) in order to build the extension.\r\n\r\n## Installation\r\n\r\nWithin the source directory, the following should work:\r\n\r\n    $ phpize\r\n    $ ./configure\r\n    $ make\r\n    $ make install\r\n    \r\nAfter successful installation you should have *idna2.so* within your php extension directory. In order to make this extension usable to your php code, add the following line to your php.ini:\r\n\r\n    extension=idna2.so\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}